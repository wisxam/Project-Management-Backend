generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId            Int     @id @default(autoincrement())
  username          String  @unique
  email             String  @unique
  profilePictureUrl String?
  teamId            Int?
  password          String

  authoredTasks     Task[]              @relation("TaskAuthor")
  assignedTasks     Task[]              @relation("TaskAssignee")
  taskAssignments   TaskAssignment[]
  attachments       Attachment[]
  comments          Comment[]
  team              Team?               @relation(fields: [teamId], references: [id])
  projects          Project[]
  InvitationRequest InvitationRequest[]
  ProjectUser       ProjectUser[]
}

model Team {
  id                   Int           @id @default(autoincrement())
  teamName             String
  productOwnerUserId   Int?
  projectManagerUserId Int?
  projectTeams         ProjectTeam[]
  user                 User[]
}

model Project {
  id                 Int                 @id @default(autoincrement())
  name               String
  description        String?
  startDate          DateTime?
  endDate            DateTime?
  userId             Int
  inviteCodes        InviteCode[]
  invitationRequests InvitationRequest[]
  users              ProjectUser[]

  tasks        Task[]
  projectTeams ProjectTeam[]
  user         User          @relation(fields: [userId], references: [userId])
}

model ProjectUser {
  id        Int    @id @default(autoincrement())
  username  String
  email     String
  projectId Int?
  userId    Int
  role      String

  project Project? @relation(fields: [projectId], references: [id])
  user    User     @relation(fields: [userId], references: [userId])
}

enum ProjectRole {
  admin
  user
}

model InviteCode {
  id          Int       @id @default(autoincrement())
  code        String    @unique // Store the generated invitation code
  projectId   Int       @unique // Link to the project
  project     Project   @relation(fields: [projectId], references: [id])
  expiresAt   DateTime? // Optional expiration time for the code
  ownerUserId Int
  projectName String    @default("nice")

  InvitationRequest InvitationRequest[]
}

model InvitationRequest {
  id             Int           @id @default(autoincrement())
  userIdRequest  Int
  projectId      Int
  inviteCodeId   String
  status         RequestStatus @default(pending)
  requestedAt    DateTime      @default(now())
  projectOwnerId Int
  userName       String
  userEmail      String
  projectName    String        @default("nice")

  user       User       @relation(fields: [userIdRequest], references: [userId])
  project    Project    @relation(fields: [projectId], references: [id])
  inviteCode InviteCode @relation(fields: [inviteCodeId], references: [code])
}

enum RequestStatus {
  pending
  accepted
  denied
}

model ProjectTeam {
  id        Int     @id @default(autoincrement())
  teamId    Int
  projectId Int
  team      Team    @relation(fields: [teamId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])
}

model Task {
  id             Int      @id @default(autoincrement())
  title          String
  description    String?
  status         String?
  priority       String?
  tags           String?
  startDate      DateTime
  dueDate        DateTime
  points         Int?
  projectId      Int
  authorUserId   Int?
  assignedUserId Int?

  project         Project?         @relation(fields: [projectId], references: [id])
  author          User?            @relation("TaskAuthor", fields: [authorUserId], references: [userId])
  assignee        User?            @relation("TaskAssignee", fields: [assignedUserId], references: [userId])
  taskAssignments TaskAssignment[]
  attachments     Attachment[]
  comments        Comment[]
}

model TaskAssignment {
  id     Int @id @default(autoincrement())
  userId Int
  taskId Int

  user User @relation(fields: [userId], references: [userId])
  task Task @relation(fields: [taskId], references: [id])
}

model Attachment {
  id           Int     @id @default(autoincrement())
  fileURL      String
  fileName     String?
  taskId       Int
  uploadedById Int

  task       Task @relation(fields: [taskId], references: [id])
  uploadedBy User @relation(fields: [uploadedById], references: [userId])
}

model Comment {
  id     Int    @id @default(autoincrement())
  text   String
  taskId Int
  userId Int

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [userId])
}
